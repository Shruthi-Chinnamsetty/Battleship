Task 1.1:

public static boolean checkCharacter(char s){

    if (s != '*' && s != 'S' && s != '.') {
        return false;
    }
    return true;
}

Task 1.2:

public static int checkValid(char[][] board){

    if (board == null){
        return 0; // null board
    }

    if (board.length != 10){
        return 1; // // board is wrong size
    }

    for(int i=0;i<10;i++){
        if(board[i].length != 10){
            return 1; // board is wrong size
        }
    }

    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[i].length; j++) {
            char boardSquare = board[i][j];
            if (boardSquare != '*' && boardSquare != 'S' && boardSquare != '.') {
                return 2; // at least 1 invalid square
            }
        }
    }

    return 3; // board is valid
}

Task 1.3:

// main method
public static int countSunk(char[][] board){

        

        int countOfShips = 0;

        char[][] result = getShips(board);


        for (int i = 0; i < result.length; i++){

            if (!checkChars(result[i], '.') && !checkChars(result[i], 'S')){
                countOfShips += 1;
            }

        }

        if (countOfShips == 0){
            return -1;
        }

        return countOfShips;
    }

    public static boolean checkChars(char[] array, char targetChar1) {

        for (char c : array) {
            if (c == targetChar1) {
                return true; 
            }
        }

        return false;
    }

    public static char[][] getShips(char[][] board) {
        ArrayList<String> combinations = new ArrayList<>();
        
        for (char[] row : board) {
            StringBuilder sb = new StringBuilder();
            for (char c : row) {
                if (c != '.') {
                    sb.append(c);
                } else if (sb.length() > 0) {
                    combinations.add(sb.toString());
                    sb = new StringBuilder();
                }
            }
            if (sb.length() > 0) {
                combinations.add(sb.toString());
            }
        }

        char[][] result = new char[combinations.size()][];
        for (int i = 0; i < combinations.size(); i++) {
            result[i] = combinations.get(i).toCharArray();
        }
        
        return result;
    }

Task 1.4:

public static int checkSquare(int r, char c, char[][] board){

    if (r < 1 || r>10){
        return 0; // row number is invalid
    }

    if (!(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J')){
        return 1; // column number is invalid
    }

    HashMap<Character, Integer> map = new HashMap<>();

    map.put('A', 0);
    map.put('B', 1);
    map.put('C', 2);
    map.put('D', 3);
    map.put('E', 4);
    map.put('F', 5);
    map.put('G', 6);
    map.put('H', 7);
    map.put('I', 8);
    map.put('J', 9);

    char square = board[r-1][map.get(c)];

    if (square == 'S'){
        return 2; // hit S
    }

    if (square == '.'){
        return 3; // hit . 
    }

    if (square == '*'){
        return 4; // hit *
    }

    return 5;
}

Task 1.5:

public static boolean checkChars(char[] array, char targetChar1, char targetChar2) {
    boolean char1Exists = false;
    boolean char2Exists = false;

    for (char c : array) {
        if (c == targetChar1) {
            char1Exists = true; 
        }
        if (c == targetChar2) {
            char2Exists = true; 
        }

        if (char1Exists && char2Exists) {
            return true;
        }
    }

    return false;
}

public static boolean checkDot(char[] array, char targetChar1) {

    for (char c : array) {
        if (c == targetChar1) {
            return true; 
        }
    }

    return false;
}

public static char[][] getCombinations(char[][] board) {
    ArrayList<String> combinations = new ArrayList<>();
    
    for (char[] row : board) {
        StringBuilder sb = new StringBuilder();
        for (char c : row) {
            if (c != '.') {
                sb.append(c);
            } else if (sb.length() > 0) {
                combinations.add(sb.toString());
                sb = new StringBuilder();
            }
        }
        if (sb.length() > 0) {
            combinations.add(sb.toString());
        }
    }

    char[][] result = new char[combinations.size()][];
    for (int i = 0; i < combinations.size(); i++) {
        result[i] = combinations.get(i).toCharArray();
    }
    
    return result;
}

public static int checkShips(char[][] board, char s, int shipsize){

    int shipCount = 0;

    for (int i = 0; i < board.length; i++) {
                
        int j = 0;

        int k;                   

        while(j < 10){

            boolean isSunk = true;

            for (k = j; k < j+shipsize && k < 10; k++) {
        
                if (board[i][k] != s) {
                    isSunk = false;
                    j += 1;
                    break;
                }
            }

            if (isSunk) {
                
                if (k == 10){


                    boolean valid = true;

                    for (int z = 9; z > 9-shipsize; z--){
                        if (board[i][z] != s){
                            valid = false;
                        }
                    }

                    if(valid){
                        if (board[i][k-(shipsize+1)] == '.'){
                            shipCount += 1;
                            break;
                        }
                        break;
                    }

                }

                if (k < 9){

                    if (board[i][k] == '.'){

                        try{

                            if (board[i][k-(shipsize+1)] == '.'){

                                shipCount += 1;
                                j = k;

                            }
                        }
                        catch (Exception e){
                            shipCount += 1;
                            j = k;
                        }

                        j = k;

                    }

                    else{

                        int z;

                        for (z=k; z<10; z++){
                            if (board[i][z] != s){
                                j = z;
                                break;
                            }
                        }
                        
                        if(z == 10){
                            break;
                        }

                    }

                }
                
                else{
                    break;
                }
            }

        }           
    }

    return shipCount;

}

public static int countShips(char[][] board, String typeOfShip, String damageTypeOfShip) {

    HashMap<String, Integer> sizesOfShipTypes = new HashMap<>();

    sizesOfShipTypes.put("Carrier", 5);
    sizesOfShipTypes.put("Battleship", 4);
    sizesOfShipTypes.put("Cruiser", 3);
    sizesOfShipTypes.put("Destroyer", 2);

    if (typeOfShip!= "Carrier" && typeOfShip!= "Battleship" && typeOfShip!= "Cruiser" && typeOfShip!= "Destroyer"){
        return -1;
    }

    if(damageTypeOfShip!= "undamaged" && damageTypeOfShip!= "damaged" && damageTypeOfShip!= "sunk" && damageTypeOfShip!= "all types"){
        return -2;
    }

    int shipsize = sizesOfShipTypes.get(typeOfShip);

    int shipCount = 0;

    switch (damageTypeOfShip) {    
            
        case "sunk":
            
            shipCount = checkShips(board, '*', shipsize);     
            break;       

        case "undamaged":

            shipCount = checkShips(board, 'S', shipsize);
            break;

        case "damaged":

            char[][] result = getCombinations(board);

            for (int i = 0; i < result.length; i++){

                boolean undamaged = checkChars(result[i], 'S', '*');

                if (undamaged && result[i].length == shipsize){
                    shipCount += 1;
                }

            }

            break;

        case "all types":
            
            char[][] result2 = getCombinations(board);

            for(int i = 0; i< result2.length; i++){

                boolean dot = checkDot(result2[i], '.');

                if(!dot && result2[i].length == shipsize){

                    shipCount += 1;
    
                }

            }

    }
    
    return shipCount;

}

Bonus:

public static float[] countSunk(char[][] board){

    int[] destroyer = {0, 0};
    int[] cruiser = {0, 0};
    int[] battleship = {0, 0};
    int[] carrier = {0, 0};

    char[][] result = getShips(board);

    for(int i = 0; i< result.length; i++){

        if (checkChars(result[i], '.')){
            continue;
        }

        if (result[i].length == 2){
            destroyer[0] += 2;
            destroyer[1] += countStars(result[i]);
        }

        if (result[i].length == 3){
            cruiser[0] += 3;
            cruiser[1] += countStars(result[i]);
        }

        if (result[i].length == 4){
            battleship[0] += 4;
            battleship[1] += countStars(result[i]);
        }

        if (result[i].length == 5){
            carrier[0] += 5;
            carrier[1] += countStars(result[i]);
        }

    }

    float[] report = new float[4];

    report[0] = (carrier[0] == 0) ? -1 : ((carrier[1] == 0) ? 0 : ((float) carrier[1] * 100) / carrier[0]);

    report[1] = (battleship[0] == 0) ? -1 : ((battleship[1] == 0) ? 0 : ((float) battleship[1] * 100) / battleship[0]);

    report[2] = (cruiser[0] == 0) ? -1 : ((cruiser[1] == 0) ? 0 : ((float) cruiser[1] * 100) / cruiser[0]);

    report[3] = (destroyer[0] == 0) ? -1 : ((destroyer[1] == 0) ? 0 : ((float) destroyer[1] * 100) / destroyer[0]);

    return report;
    
}

public static int countStars(char[] array) {

    int count = 0;

    for (char c : array) {
        if (c == '*') {
             count +=  1;
        }
    }

    return count;

}

public static boolean checkChars(char[] array, char targetChar1) {

    for (char c : array) {
        if (c == targetChar1) {
            return true; 
        }
    }

    return false;
}

public static char[][] getShips(char[][] board) {
    ArrayList<String> combinations = new ArrayList<>();
    
    for (char[] row : board) {
        StringBuilder sb = new StringBuilder();
        for (char c : row) {
            if (c != '.') {
                sb.append(c);
            } else if (sb.length() > 0) {
                combinations.add(sb.toString());
                sb = new StringBuilder();
            }
        }
        if (sb.length() > 0) {
            combinations.add(sb.toString());
        }
    }

    char[][] result = new char[combinations.size()][];
    for (int i = 0; i < combinations.size(); i++) {
        result[i] = combinations.get(i).toCharArray();
    }
    
    return result;
}
